spring.application.name=service-monit
eureka.client.serviceUrl.defaultZone=http://localhost:2000/eureka/

# 数据库访问配置
# 主数据源，默认的
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.20.102:3306/paas?useUnicode\=true&characterEncoding\=utf-8
#spring.datasource.url=jdbc:mysql://101.132.42.222:3306/paas?useUnicode\=true&characterEncoding\=utf-8
spring.datasource.username=root
spring.datasource.password=ENC(9IiZamy8fqltc1/KyItB0A==)
jasypt.encryptor.password=asdasdasdasdasd

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小 
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#freemarker config
spring.freemarker.request-context-attribute=request
logging.level.cn.com=DEBUG
#config of server
server.port: 8081
server.context-path: /
server.session.timeout:1800
#log config
logging.file=logs/paas.log  
logging.level=debug  

#kafka config
spring.kafka.bootstrap-servers=192.168.20.103:9092
#spring.kafka.consumer.group-id=defautgroup
#spring.kafka.consumer.auto-offset-reset=earliest

#通信中间件协议指令接口
mediserver.ethernet=http://192.168.20.102:8083/model1/contr
mediserver.gprs=http://192.168.20.102:9084/model1/contr
mediserver.LoRaWan=http://192.168.20.102:9084/model1/contr
mediserver.Wi-Fi=""
mediserver.NB-IoT=""
mediserver.modbus=http://192.168.20.102:8074/model1/contr
#生产调试回调url
test.callback = ""
#通信中间件采集数据上报mq队列名称
mq.queue.meter.data=dev.queue.meter.data
#通信中间件监听设备网络状态mq队列名称
mq.queue.net.status=dev.queue.device.monit

#\u901A\u8BAFengine \u914D\u7F6E\u8D85\u65F6\u65F6\u95F4
#rs 485 \u94FE\u63A5
engine.timeout.elec.rs485=20000
engine.timeout.water.rs485=30000
# \u5E73\u53F0
engine.timeout.elec.platform=35000
engine.timeout.water.platform=50000
# \u76F4\u8FDE
engine.timeout.elec.directc=35000
engine.timeout.water.directc=50000

eureka.instance.prefer-ip-address=true

#snowf 序号生成规则定义
#spring.snowf.workerId=0
#spring.snowf.dataId=0

http.proxy.hostname=
http.proxy.port=0

page.orgId=1008
page.appId=100801
#################redis基础配置#################
spring.redis.database=0
spring.redis.host=192.168.20.111
#spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000

#################redis线程池设置#################
# 连接池中的最大空闲连接，默认值是8。
#spring.redis.pool.max-idle=500
#连接池中的最小空闲连接，默认值是0。
#spring.redis.pool.min-idle=0
# 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
#spring.redis.pool.max-active=2000
# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
#spring.redis.pool.max-wait=1000

#################redis哨兵设置#################
# Redis服务器master的名字
#spring.redis.sentinel.master=master8026
# redis-sentinel的配置地址和端口
#spring.redis.sentinel.nodes=10.189.80.25:26379,10.189.80.26:26379,10.189.80.27:26378