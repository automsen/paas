spring.application.name=service-auth
eureka.client.serviceUrl.defaultZone=http://10.10.1.1:2000/eureka/

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=MYSQL
# 数据库访问配置
# 主数据源，默认的
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://172.19.152.58:3306/paas?useUnicode\=true&characterEncoding\=utf-8
spring.datasource.username=root
spring.datasource.password=ENC(aImMePWepPXIElRTsK9/9A==)
jasypt.encryptor.password=asdasdasdasdasd


# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小 
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

eureka.instance.prefer-ip-address=true

logging.level.cn.com=DEBUG
#config of server
server.port: 8070
server.context-path: /
server.session.timeout:1800
#log config
logging.file=logs/auth.log  
logging.level=debug

jwt.busp.expire_time=360
jwt.busp.secret=232a232123233vdsfsdyyr54gfhertertertasdasqweqwe
jwt.admin.expire_time=360
jwt.admin.secret=sdfssdsw23123124223123hgfhfghgfghfghyuiyui
jwt.buss.expire_time=360
jwt.buss.secret=sdfssdsw2312312422312323gkjpiqpwueiqwhkjshdajsyhduiqwyeiuoqywgdsk324234hfghfgh
jwt.bussuser.expire_time=360
jwt.bussuser.secret=sdfssdsw2312312422312323gkjpiqpwueiqwhkjshpopwqipiposdfsdfuidfkjch5675htrywerwffsdf
jwt.sadminp.expire_time=360
jwt.sadminp.secret=sdfssdsw2312312422312323gkjpiqpwuesdfhsdkfhuiweyruoiweyr7567fsdfsdfsdfsdfsdf

#kafka config
spring.kafka.bootstrap-servers=172.19.179.15:9092
#spring.kafka.consumer.group-id=defautgroup
#spring.kafka.consumer.auto-offset-reset=earliest

http.proxy.hostname=172.19.152.59
http.proxy.port=8033

wx_appId=wxc88cad4ade027d73
wx_secret=0244277c24f0dbf1bc3040e4c790972e
#http_get_accesstoken_url=https://api.weixin.qq.com/sns/oauth2/access_token?appid=wxc88cad4ade027d73&secret=0244277c24f0dbf1bc3040e4c790972e&code=#0&grant_type=authorization_code
#http_get_userinfo_url=https://api.weixin.qq.com/sns/userinfo?access_token=#0&openid=#1&lang=zh_CN
wx_http_get_access_token=https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wxc88cad4ade027d73&secret=0244277c24f0dbf1bc3040e4c790972e
wx_http_get_jsapi_ticket=https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=#0&type=jsapi