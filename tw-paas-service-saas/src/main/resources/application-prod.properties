spring.application.name=service-saas
eureka.client.serviceUrl.defaultZone: http://10.10.1.1:2000/eureka/

management.security.enabled=false
management.health.redis.enabled=false

eureka.instance.prefer-ip-address=true

# 数据库访问配置
# 主数据源，默认的
spring.datasource.url=jdbc:mysql://172.19.152.58:3306/saas?useUnicode\=true&characterEncoding\=utf-8
#spring.datasource.url=jdbc:mysql://101.132.42.222:3306/paas?useUnicode\=true&characterEncoding\=utf-8
spring.datasource.username=root
spring.datasource.password=ENC(aImMePWepPXIElRTsK9/9A==)
jasypt.encryptor.password=asdasdasdasdasd

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小 
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#config of server
server.port: 8081
server.context-path: /
server.session.timeout:1800
#log config
logging.level.cn.com=DEBUG
logging.file=logs/saas.log  
logging.level=debug  

#kafka config
spring.kafka.bootstrap-servers=172.19.179.15:9092
spring.kafka.consumer.group-id=defautgroup
spring.kafka.consumer.auto-offset-reset=earliest

#snowf 序号生成规则定义
#spring.snowf.workerId=0
#spring.snowf.dataId=0
paas.url=http://172.19.179.16:2100/ps_api/
paas.appKey=APP_5e0e67345800000
paas.secret=47ea97c4d5b84f0fbff1b61e96da0d91

hadoop.hbase.zookeeper.property.clientPort=2181
hadoop.hbase.zookeeper.quorum=172.19.152.59
hadoop.hbase.master=172.19.152.59:16010

##tw config
#weixin.appid=wxc88cad4ade027d73
#weixin.secret=0244277c24f0dbf1bc3040e4c790972e
#weixin.mchid=1491567212
#weixin.key=fhgbhsd123DFGfgFFGOJWRlikjhhghgd
#ggtd config
weixin.appid=wx3ede89a1be84cb64
weixin.secret=3521a325a3bb53eddbf02feb745c3b41
weixin.mchid=1510364211
weixin.key=asdgfpgv23U0JFSALFJ32r50sfnsaekf
weixin.signType=MD5
weixin.scan.payResultUrl=http://saas.wx.tw-iot.cn/ss_api/callback/rechargeCallback

##alipay
alipay.payResultUrl=http://saas.wx.tw-iot.cn/ss_api/atm/alipayCallback

http.proxy.hostname=172.19.152.59
http.proxy.port=8033

#################redis基础配置#################
spring.redis.database=0
spring.redis.host=172.19.179.15
spring.redis.password=
spring.redis.port=6379
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=3000
#################redis线程池设置#################
# 连接池中的最大空闲连接，默认值是8。
#spring.redis.pool.max-idle=500
#连接池中的最小空闲连接，默认值是0。
#spring.redis.pool.min-idle=5
# 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
#spring.redis.pool.max-active=2000
# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
#spring.redis.pool.max-wait=-1

#################redis哨兵设置#################
# Redis服务器master的名字
#spring.redis.sentinel.master=master8026
# redis-sentinel的配置地址和端口
#spring.redis.sentinel.nodes=10.189.80.25:26379,10.189.80.26:26379,10.189.80.27:26378

#################redis\u54E8\u5175\u8BBE\u7F6E#################
# Redis\u670D\u52A1\u5668master\u7684\u540D\u5B57
#spring.redis.sentinel.master=master8026
# redis-sentinel\u7684\u914D\u7F6E\u5730\u5740\u548C\u7AEF\u53E3
#spring.redis.sentinel.nodes=10.189.80.25:26379,10.189.80.26:26379,10.189.80.27:26378